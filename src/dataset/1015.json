{
  "code": 1015,
  "message": "Parameter cannot have question mark and initializer.",
  "regexFind": "/([a-zA-Z_$][a-zA-Z0-9_$]*)\\?\\s*:\\s*([^=()]+?)\\s*=\\s*([^,)]+)/",
  "regexReplace": "$1: $2= $3",
  "suggestion": "Remove the question mark from optional parameters that have default values, or remove the default value from optional parameters",
  "example": [
    {
      "base": "function greet(name?: string = \"Guest\") {",
      "fixed": "function greet(name: string = \"Guest\") {",
      "description": "Parameters with default values are automatically optional, so the '?' is redundant"
    },
    {
      "base": "const greetArrow = (name?: string = \"Guest\") => {",
      "fixed": "const greetArrow = (name: string = \"Guest\") => {",
      "description": "Arrow function parameters with default values don't need the '?'"
    },
    {
      "base": "class Greeter {\n  greet(name?: string = \"Guest\") {\n    console.log(`Hello, ${name}!`)\n  }\n}",
      "fixed": "class Greeter {\n  greet(name: string = \"Guest\") {\n    console.log(`Hello, ${name}!`)\n  }\n}",
      "description": "Method parameters with default values don't need the '?'"
    },
    {
      "base": "function genericFunction<T>(value?: T = null): T | null {",
      "fixed": "function genericFunction<T>(value: T = null): T | null {",
      "description": "Generic function parameters with default values don't need the '?'"
    },
    {
      "base": "function withCallback(callback?: (value: string) => void = (v) => console.log(v)) {",
      "fixed": "function withCallback(callback: (value: string) => void = (v) => console.log(v)) {",
      "description": "Callback parameters with default values don't need the '?'"
    }
  ]
}